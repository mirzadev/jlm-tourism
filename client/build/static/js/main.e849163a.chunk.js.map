{"version":3,"sources":["assets/spinner.gif","utils/reducers.js","utils/actions.js","utils/GlobalState.js","utils/helpers.js","components/ProductItem/index.js","utils/queries.js","components/ProductList/index.js","components/CategoryMenu/index.js","components/CartItem/index.js","utils/auth.js","components/Cart/index.js","pages/Home.js","pages/Detail.js","components/Jumbotron/index.js","pages/NoMatch.js","utils/mutations.js","pages/Login.js","pages/Signup.js","components/Nav/index.js","pages/Success.js","pages/OrderHistory.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","reducer","state","action","type","products","categories","currentCategory","cartOpen","cart","product","newState","filter","_id","length","map","purchaseQuantity","StoreContext","createContext","Provider","StoreProvider","value","initialState","props","useReducer","dispatch","console","log","useStoreContext","useContext","idbPromise","storeName","method","object","Promise","resolve","reject","db","tx","store","request","window","indexedDB","open","onupgradeneeded","e","result","createObjectStore","keyPath","onerror","onsuccess","transaction","objectStore","put","all","getAll","delete","oncomplete","close","ProductItem","item","image","name","price","quantity","className","to","alt","src","style","width","height","count","pluralize","onClick","itemInCart","find","cartItem","parseInt","QUERY_PRODUCTS","gql","QUERY_CHECKOUT","QUERY_CATEGORIES","QUERY_USER","ProductList","useQuery","loading","data","useEffect","forEach","then","category","key","spinner","CategoryMenu","categoryData","id","CartItem","placeholder","onChange","target","role","aria-label","removeFromCart","decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","location","assign","removeItem","stripePromise","loadStripe","Cart","useLazyQuery","getCheckout","toggleCart","a","getCart","res","redirectToCheckout","sessionId","checkout","session","sum","toFixed","calculateTotal","Auth","loggedIn","productIds","i","push","variables","Home","Detail","useParams","useState","currentProduct","setCurrentProduct","indexedProducts","description","disabled","p","Jumbotron","children","clear","paddingTop","textAlign","NoMatch","LOGIN","ADD_ORDER","ADD_USER","Login","email","password","formState","setFormState","useMutation","login","error","handleFormSubmit","event","preventDefault","mutationResponse","handleChange","onSubmit","htmlFor","Signup","addUser","firstName","lastName","Nav","class","href","logout","Success","addOrder","setTimeout","saveOrder","OrderHistory","user","orders","order","purchaseDate","toLocaleDateString","index","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","client","ApolloClient","link","concat","cache","InMemoryCache","App","ApolloProvider","exact","path","component","rel","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.e849163a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/spinner.ab497855.gif\";","import { useReducer } from 'react';\nimport {\n      UPDATE_PRODUCTS,\n      UPDATE_CATEGORIES,\n      UPDATE_CURRENT_CATEGORY,\n      ADD_TO_CART,\n      ADD_MULTIPLE_TO_CART,\n      REMOVE_FROM_CART,\n      UPDATE_CART_QUANTITY,\n      CLEAR_CART,\n      TOGGLE_CART\n} from \"./actions\";\n\nexport const reducer = (state, action) => {\n      switch (action.type) {\n            // if action type value is the value of `UPDATE_PRODUCTS`, return a new state object with an updated products array\n            case UPDATE_PRODUCTS:\n                  return {\n                        ...state,\n                        products: [...action.products]\n                  };\n            // if action type value is the value of `UPDATE_CATEGORIES`, return a new state object with an updated categories array\n            case UPDATE_CATEGORIES:\n                  return {\n                        ...state,\n                        categories: [...action.categories]\n                  };\n\n            default:\n                  return state;\n\n            // to compare the newState and initialState to confirm if the initialState has changed.\n            case UPDATE_CURRENT_CATEGORY:\n                  return {\n                        ...state,\n                        currentCategory: action.currentCategory\n                  };\n\n            // for Add to Cart\n            case ADD_TO_CART:\n                  return {\n                        ...state,\n                        cartOpen: true,\n                        cart: [...state.cart, action.product]\n                  };\n\n\n            // to add multiple items to cart\n            case ADD_MULTIPLE_TO_CART:\n                  return {\n                        ...state,\n                        cart: [...state.cart, ...action.products],\n                  };\n\n            // to remove items from cart\n            case REMOVE_FROM_CART:\n                  let newState = state.cart.filter(product => {\n                        return product._id !== action._id;\n                  });\n\n                  return {\n                        ...state,\n                        cartOpen: newState.length > 0,\n                        cart: newState\n                  };\n\n            // to update the item quantity in the cart\n            case UPDATE_CART_QUANTITY:\n                  return {\n                        ...state,\n                        cartOpen: true,\n                        cart: state.cart.map(product => {\n                              if (action._id === product._id) {\n                                    product.purchaseQuantity = action.purchaseQuantity;\n                              }\n                              return product;\n                        })\n                  };\n\n            // to clear items from the cart\n            case CLEAR_CART:\n                  return {\n                        ...state,\n                        cartOpen: false,\n                        cart: []\n                  };\n\n            // to toggle items in the cart\n            case TOGGLE_CART:\n                  return {\n                        ...state,\n                        cartOpen: !state.cartOpen\n                  };\n      }\n};\n\nexport function useProductReducer(initialState) {\n      return useReducer(reducer, initialState);\n}\n\n","export const UPDATE_PRODUCTS = \"UPDATE_PRODUCTS\";\nexport const UPDATE_CATEGORIES = \"UPDATE_CATEGORIES\";\nexport const UPDATE_CURRENT_CATEGORY = \"UPDATE_CURRENT_CATEGORY\";\nexport const ADD_TO_CART = 'ADD_TO_CART';\nexport const ADD_MULTIPLE_TO_CART = 'ADD_MULTIPLE_TO_CART';\nexport const REMOVE_FROM_CART = 'REMOVE_FROM_CART';\nexport const UPDATE_CART_QUANTITY = 'UPDATE_CART_QUANTITY';\nexport const CLEAR_CART = 'CLEAR_CART';\nexport const TOGGLE_CART = 'TOGGLE_CART';","import React, { createContext, useContext } from \"react\";\nimport { useProductReducer } from './reducers';\n\nconst StoreContext = createContext();\nconst { Provider } = StoreContext;\n\n// Adding StoreProvider function\nconst StoreProvider = ({ value = [], ...props }) => {\n      const [state, dispatch] = useProductReducer({\n            products: [],\n            cart: [],\n            cartOpen: false,\n            categories: [],\n            currentCategory: ''\n      });\n      // use this to confirm it works!\n      console.log(state);\n      return <Provider value={[state, dispatch]} {...props} />;\n};\n\nconst useStoreContext = () => {\n      return useContext(StoreContext);\n};\n\n\nexport { StoreProvider, useStoreContext };","export function pluralize(name, count) {\n  if (count === 1) {\n    return name\n  }\n  return name + 's'\n}\n\nexport function idbPromise(storeName, method, object) {\n  return new Promise((resolve, reject) => {\n    // open connection to the database `shop-shop` with the version of 1\n    const request = window.indexedDB.open('jlm-tourism', 1);\n\n    // create variables to hold reference to the database, transaction (tx), and object store\n    let db, tx, store;\n\n    // if version has changed (or if this is the first time using the database), run this method and create the three object stores \n    request.onupgradeneeded = function (e) {\n      const db = request.result;\n      // create object store for each type of data and set \"primary\" key index to be the `_id` of the data\n      db.createObjectStore('products', { keyPath: '_id' });\n      db.createObjectStore('categories', { keyPath: '_id' });\n      db.createObjectStore('cart', { keyPath: '_id' });\n    };\n\n    // handle any errors with connecting\n    request.onerror = function (e) {\n      console.log('There was an error');\n    };\n\n    // on database open success\n    request.onsuccess = function (e) {\n      // save a reference of the database to the `db` variable\n      db = request.result;\n      // open a transaction do whatever we pass into `storeName` (must match one of the object store names)\n      tx = db.transaction(storeName, 'readwrite');\n      // save a reference to that object store\n      store = tx.objectStore(storeName);\n\n      // if there's any errors, let us know\n      db.onerror = function (e) {\n        console.log('error', e);\n      };\n\n      switch (method) {\n        case 'put':\n          store.put(object);\n          resolve(object);\n          break;\n        case 'get':\n          const all = store.getAll();\n          all.onsuccess = function () {\n            resolve(all.result);\n          };\n          break;\n        case 'delete':\n          store.delete(object._id);\n          break;\n        default:\n          console.log('No valid method');\n          break;\n      }\n\n      // when the transaction is complete, close the connection\n      tx.oncomplete = function () {\n        db.close();\n      };\n    };\n\n  });\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { pluralize } from \"../../utils/helpers\";\nimport { useStoreContext } from '../../utils/GlobalState';\nimport { ADD_TO_CART, UPDATE_CART_QUANTITY } from '../../utils/actions';\nimport { idbPromise } from \"../../utils/helpers\";\n\nfunction ProductItem(item) {\n  const {\n    image,\n    name,\n    _id,\n    price,\n    quantity\n  } = item;\n\n  const [state, dispatch] = useStoreContext();\n\n  const { cart } = state;\n\n  const addToCart = () => {\n    // find the cart item with the matching id\n    const itemInCart = cart.find((cartItem) => cartItem._id === _id);\n\n    // if there was a match, call UPDATE with a new purchase quantity\n    if (itemInCart) {\n      dispatch({\n        type: UPDATE_CART_QUANTITY,\n        _id: _id,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      });\n      idbPromise('cart', 'put', {\n        ...itemInCart,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      });\n    } else {\n      dispatch({\n        type: ADD_TO_CART,\n        product: { ...item, purchaseQuantity: 1 }\n      });\n      idbPromise('cart', 'put', { ...item, purchaseQuantity: 1 });\n    }\n  }\n\n  return (\n    <div className=\"card px-1 py-1\">\n      <Link to={`/products/${_id}`}>\n        <img\n          alt={name}\n          src={`/images/${image}`}\n          style={{ width: 200, height: 200 }}\n        />\n        <p>{name}</p>\n      </Link>\n      <div>\n        <div>{quantity} {pluralize(\"item\", quantity)} in stock</div>\n        <span>${price}</span>\n      </div>\n      <button onClick={addToCart}>Add to cart</button>\n    </div>\n  );\n}\n\nexport default ProductItem;\n","import { gql } from '@apollo/client';\n\nexport const QUERY_PRODUCTS = gql`\n  query getProducts($category: ID) {\n    products(category: $category) {\n      _id\n      name\n      description\n      price\n      quantity\n      image\n      category {\n        _id\n      }\n    }\n  }\n`;\n\nexport const QUERY_CHECKOUT = gql`\n  query getCheckout($products: [ID]!) {\n    checkout(products: $products) {\n      session\n    }\n  }\n`;\n\nexport const QUERY_ALL_PRODUCTS = gql`\n  {\n    products {\n      _id\n      name\n      description\n      price\n      quantity\n      category {\n        name\n      }\n    }\n  }\n`;\n\nexport const QUERY_CATEGORIES = gql`\n  {\n    categories {\n      _id\n      name\n    }\n  }\n`;\n\nexport const QUERY_USER = gql`\n  {\n    user {\n      firstName\n      lastName\n      orders {\n        _id\n        purchaseDate\n        products {\n          _id\n          name\n          description\n          price\n          quantity\n          image\n        }\n      }\n    }\n  }\n`;\n","import React, { useEffect } from 'react';\nimport { useStoreContext } from '../../utils/GlobalState';\nimport { UPDATE_PRODUCTS } from '../../utils/actions';\nimport { useQuery } from '@apollo/client';\nimport ProductItem from '../ProductItem';\nimport { QUERY_PRODUCTS } from '../../utils/queries';\nimport { idbPromise } from \"../../utils/helpers\";\nimport spinner from '../../assets/spinner.gif';\n\nfunction ProductList() {\n  const [state, dispatch] = useStoreContext();\n\n  const { currentCategory } = state;\n\n  const { loading, data } = useQuery(QUERY_PRODUCTS);\n\n  useEffect(() => {\n    if (data) {\n      dispatch({\n        type: UPDATE_PRODUCTS,\n        products: data.products\n      });\n\n      data.products.forEach((product) => {\n        idbPromise('products', 'put', product);\n      });\n      // add else if to check if `loading` is undefined in `useQuery()` Hook\n    } else if (!loading) {\n      // since we're offline, get all of the data from the `products` store\n      idbPromise('products', 'get').then((products) => {\n        // use retrieved data to set global state for offline browsing\n        dispatch({\n          type: UPDATE_PRODUCTS,\n          products: products\n        });\n      });\n    }\n  }, [data, loading, dispatch]);\n\n  function filterProducts() {\n    if (!currentCategory) {\n      return state.products;\n    }\n\n    return state.products.filter(product => product.category._id === currentCategory);\n  }\n\n  return (\n    <div className=\"my-2 footer-space\">\n      <h2>Our Products:</h2>\n      {state.products.length ? (\n        <div className=\"flex-row\">\n          {filterProducts().map((product) => (\n            <ProductItem\n              key={product._id}\n              _id={product._id}\n              image={product.image}\n              name={product.name}\n              price={product.price}\n              quantity={product.quantity}\n            />\n          ))}\n        </div>\n      ) : (\n        <h3>You haven't added any products yet!</h3>\n      )}\n      {loading ? <img src={spinner} alt=\"loading\" /> : null}\n    </div>\n  );\n}\n\nexport default ProductList;\n","import React, { useEffect } from 'react';\nimport { UPDATE_CATEGORIES, UPDATE_CURRENT_CATEGORY } from '../../utils/actions';\nimport { useQuery } from '@apollo/client';\nimport { QUERY_CATEGORIES } from '../../utils/queries';\nimport { useStoreContext } from \"../../utils/GlobalState\";\nimport { idbPromise } from '../../utils/helpers';\n\nfunction CategoryMenu() {\n  const [state, dispatch] = useStoreContext();\n  const { categories } = state;\n  const { loading, data: categoryData } = useQuery(QUERY_CATEGORIES);\n\n  useEffect(() => {\n    // if categoryData exists or has changed from the response of useQuery, then run dispatch()\n    if (categoryData) {\n      // execute our dispatch function with our action object indicating the type of action and the data to set our state for categories to\n      dispatch({\n        type: UPDATE_CATEGORIES,\n        categories: categoryData.categories\n      });\n      categoryData.categories.forEach(category => {\n        idbPromise('categories', 'put', category);\n      });\n    } else if (!loading) {\n      idbPromise('categories', 'get').then(categories => {\n        dispatch({\n          type: UPDATE_CATEGORIES,\n          categories: categories\n        });\n      });\n    }\n  }, [categoryData, loading, dispatch]);\n\n  const handleClick = id => {\n    dispatch({\n      type: UPDATE_CURRENT_CATEGORY,\n      currentCategory: id\n    });\n  };\n\n  return (\n    <div>\n      <h2>Choose a Category:</h2>\n      {categories.map(item => (\n        <button\n          key={item._id}\n          onClick={() => {\n            handleClick(item._id);\n          }}\n        >\n          {item.name}\n        </button>\n      ))}\n    </div>\n  );\n}\n\nexport default CategoryMenu;\n","import React from 'react';\nimport { useStoreContext } from '../../utils/GlobalState';\nimport { REMOVE_FROM_CART, UPDATE_CART_QUANTITY } from '../../utils/actions';\nimport { idbPromise } from \"../../utils/helpers\";\n\nconst CartItem = ({ item }) => {\n      const [, dispatch] = useStoreContext();\n\n      const removeFromCart = item => {\n            dispatch({\n                  type: REMOVE_FROM_CART,\n                  _id: item._id\n            });\n            idbPromise('cart', 'delete', { ...item });\n      };\n\n      const onChange = (e) => {\n            const value = e.target.value;\n\n            if (value === '0') {\n                  dispatch({\n                        type: REMOVE_FROM_CART,\n                        _id: item._id\n                  });\n\n                  idbPromise('cart', 'delete', { ...item });\n            } else {\n                  dispatch({\n                        type: UPDATE_CART_QUANTITY,\n                        _id: item._id,\n                        purchaseQuantity: parseInt(value)\n                  });\n\n                  idbPromise('cart', 'put', { ...item, purchaseQuantity: parseInt(value) });\n            }\n      };\n\n      return (\n            <div className=\"flex-row\">\n                  <div>\n                        <img\n                              src={`/images/${item.image}`}\n                              alt=\"\"\n                        />\n                  </div>\n                  <div>\n                        <div>{item.name}, ${item.price}</div>\n                        <div>\n                              <span>Qty:</span>\n                              <input\n                                    type=\"number\"\n                                    placeholder=\"1\"\n                                    value={item.purchaseQuantity}\n                                    onChange={onChange}\n                              />\n                              <span\n                                    role=\"img\"\n                                    aria-label=\"trash\"\n                                    onClick={() => removeFromCart(item)}\n                              >\n                                    🗑️\n                              </span>\n                        </div>\n                  </div>\n            </div>\n      );\n}\n\nexport default CartItem;","import decode from 'jwt-decode';\n\nclass AuthService {\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token);\n  }\n\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem('id_token', idToken);\n\n    window.location.assign('/');\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token');\n    // this will reload the page and reset the state of the application\n    window.location.assign('/');\n  }\n}\n\nexport default new AuthService();\n","import React, { useEffect } from \"react\";\nimport CartItem from '../CartItem';\nimport Auth from '../../utils/auth';\nimport { useLazyQuery } from '@apollo/client';\nimport { QUERY_CHECKOUT } from '../../utils/queries';\nimport { loadStripe } from '@stripe/stripe-js';\nimport { useStoreContext } from '../../utils/GlobalState';\nimport { TOGGLE_CART, ADD_MULTIPLE_TO_CART } from \"../../utils/actions\";\nimport './style.css';\nimport { idbPromise } from \"../../utils/helpers\";\n\nconst stripePromise = loadStripe('pk_test_TYooMQauvdEDq54NiTphI7jx');\n\nconst Cart = () => {\n      const [state, dispatch] = useStoreContext();\n      const [getCheckout, { data }] = useLazyQuery(QUERY_CHECKOUT);\n\n      useEffect(() => {\n            async function getCart() {\n                  const cart = await idbPromise('cart', 'get');\n                  dispatch({ type: ADD_MULTIPLE_TO_CART, products: [...cart] });\n            };\n\n            if (!state.cart.length) {\n                  getCart();\n            }\n      }, [state.cart.length, dispatch]);\n\n      useEffect(() => {\n            if (data) {\n                  stripePromise.then((res) => {\n                        res.redirectToCheckout({ sessionId: data.checkout.session });\n                  });\n            }\n      }, [data]);\n\n      function toggleCart() {\n            dispatch({ type: TOGGLE_CART });\n      }\n\n      function calculateTotal() {\n            let sum = 0;\n            state.cart.forEach(item => {\n                  sum += item.price * item.purchaseQuantity;\n            });\n            return sum.toFixed(2);\n      }\n\n      function submitCheckout() {\n            const productIds = [];\n\n            state.cart.forEach((item) => {\n                  for (let i = 0; i < item.purchaseQuantity; i++) {\n                        productIds.push(item._id);\n                  }\n            });\n\n            getCheckout({\n                  variables: { products: productIds }\n            });\n      }\n\n      if (!state.cartOpen) {\n            return (\n                  <div className=\"cart-closed\" onClick={toggleCart}>\n                        <span\n                              role=\"img\"\n                              aria-label=\"trash\">🛒</span>\n                  </div>\n            );\n      }\n      return (\n            <div className=\"cart\">\n                  <div className=\"close\" onClick={toggleCart}>[close]</div>\n                  <h2>Shopping Cart</h2>\n                  {state.cart.length ? (\n                        <div>\n                              {state.cart.map(item => (\n                                    <CartItem key={item._id} item={item} />\n                              ))}\n                              <div className=\"flex-row space-between\">\n                                    <strong>Total: ${calculateTotal()}</strong>\n                                    {\n                                          Auth.loggedIn() ?\n                                                <button onClick={submitCheckout}>\n                                                      Checkout\n                                                </button>\n                                                :\n                                                <span>(log in to check out)</span>\n                                    }\n                              </div>\n                        </div>\n                  ) : (\n                        <h3>\n                              <span role=\"img\" aria-label=\"shocked\">\n                                    😱\n                              </span>\n                              You haven't added anything to your cart yet!\n                        </h3>\n                  )}\n            </div>\n      );\n};\n\nexport default Cart;","import React from \"react\";\nimport ProductList from \"../components/ProductList\";\nimport CategoryMenu from \"../components/CategoryMenu\";\nimport Cart from '../components/Cart';\n\n\nconst Home = () => {\n  return (\n    <div className=\"container\">\n      <CategoryMenu />\n      <ProductList />\n      <Cart />\n\n    </div>\n  );\n};\n\nexport default Home;\n","import React, { useEffect, useState } from 'react';\nimport { Link, useParams } from 'react-router-dom';\nimport { useQuery } from '@apollo/client';\nimport { idbPromise } from \"../utils/helpers\";\nimport Cart from \"../components/Cart\";\nimport { QUERY_PRODUCTS } from '../utils/queries';\nimport spinner from '../assets/spinner.gif';\n\nimport {\n  REMOVE_FROM_CART,\n  UPDATE_CART_QUANTITY,\n  ADD_TO_CART,\n  UPDATE_PRODUCTS,\n} from '../utils/actions';\n\nimport { useStoreContext } from \"../utils/GlobalState\";\n\n\nfunction Detail() {\n  const [state, dispatch] = useStoreContext();\n  const { id } = useParams();\n\n  const [currentProduct, setCurrentProduct] = useState({})\n\n  const { loading, data } = useQuery(QUERY_PRODUCTS);\n\n  const { products, cart } = state;\n\n  useEffect(() => {\n    // already in global store\n    if (products.length) {\n      setCurrentProduct(products.find(product => product._id === id));\n    }\n    // retrieved from server\n    else if (data) {\n      dispatch({\n        type: UPDATE_PRODUCTS,\n        products: data.products\n      });\n\n      data.products.forEach((product) => {\n        idbPromise('products', 'put', product);\n      });\n    }\n    // get cache from idb\n    else if (!loading) {\n      idbPromise('products', 'get').then((indexedProducts) => {\n        dispatch({\n          type: UPDATE_PRODUCTS,\n          products: indexedProducts\n        });\n      });\n    }\n  }, [products, data, loading, dispatch, id]);\n\n  const addToCart = () => {\n    const itemInCart = cart.find((cartItem) => cartItem._id === id)\n\n    if (itemInCart) {\n      dispatch({\n        type: UPDATE_CART_QUANTITY,\n        _id: id,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      });\n      // if we're updating quantity, use existing item data and increment purchaseQuantity value by one\n      idbPromise('cart', 'put', {\n        ...itemInCart,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      });\n    } else {\n      dispatch({\n        type: ADD_TO_CART,\n        product: { ...currentProduct, purchaseQuantity: 1 }\n      });\n      // if product isn't in the cart yet, add it to the current shopping cart in IndexedDB\n      idbPromise('cart', 'put', { ...currentProduct, purchaseQuantity: 1 });\n    }\n  }\n\n  const removeFromCart = () => {\n    dispatch({\n      type: REMOVE_FROM_CART,\n      _id: currentProduct._id\n    });\n\n    // upon removal from cart, delete the item from IndexedDB using the `currentProduct._id` to locate what to remove\n    idbPromise('cart', 'delete', { ...currentProduct });\n  };\n\n  return (\n    <>\n      {currentProduct ? (\n        <div className=\"container my-1\">\n          <Link to=\"/\">← Back to Products</Link>\n\n          <h2>{currentProduct.name}</h2>\n\n          <p>{currentProduct.description}</p>\n\n          <p>\n            <strong>Price:</strong>${currentProduct.price}{' '}\n            <button onClick={addToCart}>\n              Add to Cart\n            </button>\n            <button\n              disabled={!cart.find(p => p._id === currentProduct._id)}\n              onClick={removeFromCart}\n            >\n              Remove from Cart\n            </button>\n          </p>\n\n          <img\n            src={`/images/${currentProduct.image}`}\n            alt={currentProduct.name}\n          />\n        </div>\n      ) : null}\n      {loading ? <img src={spinner} alt=\"loading\" /> : null}\n      <Cart />\n    </>\n  );\n}\n\nexport default Detail;\n","import React from \"react\";\n\nfunction Jumbotron({ children }) {\n  return (\n    <div\n      style={{ height: 560, clear: \"both\", paddingTop: 120, textAlign: \"center\" }}\n    >\n      {children}\n    </div>\n  );\n}\n\nexport default Jumbotron;\n","import React from \"react\";\nimport Jumbotron from \"../components/Jumbotron\";\n\nconst NoMatch = () => {\n  return (\n    <div>\n      <Jumbotron>\n        <h1>404 Page Not Found</h1>\n        <h1>\n          <span role=\"img\" aria-label=\"Face With Rolling Eyes Emoji\">\n            🙄\n          </span>\n        </h1>\n      </Jumbotron>\n    </div>\n  );\n};\n\nexport default NoMatch;\n","import { gql } from '@apollo/client';\n\nexport const LOGIN = gql`\n  mutation login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      token\n      user {\n        _id\n      }\n    }\n  }\n`;\n\nexport const ADD_ORDER = gql`\n  mutation addOrder($products: [ID]!) {\n    addOrder(products: $products) {\n      purchaseDate\n      products {\n        _id\n        name\n        description\n        price\n        quantity\n        category {\n          name\n        }\n      }\n    }\n  }\n`;\n\nexport const ADD_USER = gql`\n  mutation addUser(\n    $firstName: String!\n    $lastName: String!\n    $email: String!\n    $password: String!\n  ) {\n    addUser(\n      firstName: $firstName\n      lastName: $lastName\n      email: $email\n      password: $password\n    ) {\n      token\n      user {\n        _id\n      }\n    }\n  }\n`;\n","import React, { useState } from 'react';\nimport { useMutation } from '@apollo/client';\nimport { Link } from 'react-router-dom';\nimport { LOGIN } from '../utils/mutations';\nimport Auth from '../utils/auth';\n\nfunction Login(props) {\n  const [formState, setFormState] = useState({ email: '', password: '' });\n  const [login, { error }] = useMutation(LOGIN);\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    try {\n      const mutationResponse = await login({\n        variables: { email: formState.email, password: formState.password },\n      });\n      const token = mutationResponse.data.login.token;\n      Auth.login(token);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  return (\n    <div className=\"container my-1\">\n      <Link to=\"/signup\">← Go to Signup</Link>\n\n      <h2>Login</h2>\n      <form onSubmit={handleFormSubmit}>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"email\">Email address:</label>\n          <input\n            placeholder=\"youremail@test.com\"\n            name=\"email\"\n            type=\"email\"\n            id=\"email\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"pwd\">Password:</label>\n          <input\n            placeholder=\"******\"\n            name=\"password\"\n            type=\"password\"\n            id=\"pwd\"\n            onChange={handleChange}\n          />\n        </div>\n        {error ? (\n          <div>\n            <p className=\"error-text\">The provided credentials are incorrect</p>\n          </div>\n        ) : null}\n        <div className=\"flex-row flex-end\">\n          <button type=\"submit\">Submit</button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default Login;\n","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useMutation } from '@apollo/client';\nimport Auth from '../utils/auth';\nimport { ADD_USER } from '../utils/mutations';\n\nfunction Signup(props) {\n  const [formState, setFormState] = useState({ email: '', password: '' });\n  const [addUser] = useMutation(ADD_USER);\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    const mutationResponse = await addUser({\n      variables: {\n        email: formState.email,\n        password: formState.password,\n        firstName: formState.firstName,\n        lastName: formState.lastName,\n      },\n    });\n    const token = mutationResponse.data.addUser.token;\n    Auth.login(token);\n  };\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  return (\n    <div className=\"container my-1\">\n      <Link to=\"/login\">← Go to Login</Link>\n\n      <h2>Signup</h2>\n      <form onSubmit={handleFormSubmit}>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"firstName\">First Name:</label>\n          <input\n            placeholder=\"First\"\n            name=\"firstName\"\n            type=\"firstName\"\n            id=\"firstName\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"lastName\">Last Name:</label>\n          <input\n            placeholder=\"Last\"\n            name=\"lastName\"\n            type=\"lastName\"\n            id=\"lastName\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"email\">Email:</label>\n          <input\n            placeholder=\"youremail@test.com\"\n            name=\"email\"\n            type=\"email\"\n            id=\"email\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"pwd\">Password:</label>\n          <input\n            placeholder=\"******\"\n            name=\"password\"\n            type=\"password\"\n            id=\"pwd\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row flex-end\">\n          <button type=\"submit\">Submit</button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default Signup;\n","import React from \"react\";\nimport Auth from \"../../utils/auth\";\nimport { Link } from \"react-router-dom\";\nimport './style.css';\n\nfunction Nav() {\n\n  function showNavigation() {\n    if (Auth.loggedIn()) {\n      return (\n        <ul className=\"flex-row\">\n          <li className=\"mx-1\">\n            <Link to=\"/orderHistory\" className=\"order-history\">\n              Order History\n            </Link>\n          </li>\n          <li className=\"mx-1\">\n            {/* this is not using the Link component to logout or user and then refresh the application to the start */}\n            <a className=\"logout-option\" href=\"/\" onClick={() => Auth.logout()}>\n              Logout\n            </a>\n          </li>\n        </ul>\n      );\n    } else {\n      return (\n        <ul className=\"flex-row\">\n          <li className=\"mx-1\">\n            <Link to=\"/login\" className=\"login\">\n              Login\n            </Link>\n          </li>\n          <li className=\"mx-2\">\n            <Link to=\"/signup\" className=\"signup\">\n              Signup\n            </Link>\n          </li>\n        </ul>\n      );\n    }\n  }\n\n  return (\n    <header className=\"flex-row px-1\">\n      <h1 class=\"company-name\">\n        <Link to=\"/\">\n          <img src=\"/images/jlm-tourism.png\" role=\"img\" aria-label=\"JLM Logo\" class=\"app-logo\" alt=\" \" style={{ width: 75, height: 75 }} />\n          <img src=\"/images/jlm-heading.jpg\" role=\"img\" aria-label=\"JLM Heading\" alt=\" \" class=\"app-heading\" style={{ width: 500, height: 75 }} />\n\n        </Link>\n      </h1>\n\n      <nav>\n        {showNavigation()}\n      </nav>\n    </header>\n  );\n}\n\nexport default Nav;\n","import React, { useEffect } from \"react\";\nimport { useMutation } from '@apollo/client';\nimport Jumbotron from \"../components/Jumbotron\";\nimport { ADD_ORDER } from \"../utils/mutations\";\nimport { idbPromise } from \"../utils/helpers\";\n\nfunction Success() {\n      const [addOrder] = useMutation(ADD_ORDER);\n\n      useEffect(() => {\n            async function saveOrder() {\n                  const cart = await idbPromise('cart', 'get');\n                  const products = cart.map(item => item._id);\n\n                  if (products.length) {\n                        const { data } = await addOrder({ variables: { products } });\n                        const productData = data.addOrder.products;\n\n                        productData.forEach((item) => {\n                              idbPromise('cart', 'delete', item);\n                        });\n                  }\n\n                  setTimeout(() => {\n                        window.location.assign('/');\n                  }, 5000);\n\n            }\n\n            saveOrder();\n      }, [addOrder]);\n      return (\n            <div>\n                  <Jumbotron>\n                        <h1>Success!</h1>\n                        <h2>\n                              Thank you for your purchase!\n                        </h2>\n                        <h2>\n                              You will now be redirected to the homepage\n                        </h2>\n                  </Jumbotron>\n            </div>\n      );\n};\n\nexport default Success;","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport { useQuery } from '@apollo/client';\nimport { QUERY_USER } from '../utils/queries';\n\nfunction OrderHistory() {\n  const { data } = useQuery(QUERY_USER);\n  let user;\n\n  if (data) {\n    user = data.user;\n  }\n\n  return (\n    <>\n      <div className=\"container my-1\">\n        <Link to=\"/\">← Back to Products</Link>\n\n        {user ? (\n          <>\n            <h2>\n              Order History for {user.firstName} {user.lastName}\n            </h2>\n            {user.orders.map((order) => (\n              <div key={order._id} className=\"my-2\">\n                <h3>\n                  {new Date(parseInt(order.purchaseDate)).toLocaleDateString()}\n                </h3>\n                <div className=\"flex-row\">\n                  {order.products.map(({ _id, image, name, price }, index) => (\n                    <div key={index} className=\"card px-1 py-1\">\n                      <Link to={`/products/${_id}`}>\n                        <img alt={name} src={`/images/${image}`} />\n                        <p>{name}</p>\n                      </Link>\n                      <div>\n                        <span>${price}</span>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            ))}\n          </>\n        ) : null}\n      </div>\n    </>\n  );\n}\n\nexport default OrderHistory;\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  createHttpLink,\n} from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\n\nimport Home from './pages/Home';\nimport Detail from './pages/Detail';\nimport NoMatch from './pages/NoMatch';\nimport Login from './pages/Login';\nimport Signup from './pages/Signup';\nimport Nav from './components/Nav';\nimport { StoreProvider } from \"./utils/GlobalState\";\nimport Success from \"./pages/Success\";\nimport OrderHistory from './pages/OrderHistory';\n\n\nconst httpLink = createHttpLink({\n  uri: '/graphql',\n});\n\nconst authLink = setContext((_, { headers }) => {\n  const token = localStorage.getItem('id_token');\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : '',\n    },\n  };\n});\n\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <div>\n          <StoreProvider>\n            <Nav />\n            <Switch>\n              <Route exact path=\"/\" component={Home} />\n              <Route exact path=\"/login\" component={Login} />\n              <Route exact path=\"/signup\" component={Signup} />\n              <Route exact path=\"/orderHistory\" component={OrderHistory} />\n              <Route exact path=\"/success\" component={Success} />\n              <Route exact path=\"/products/:id\" component={Detail} />\n              <Route component={NoMatch} />\n            </Switch>\n            <footer className='row center mt-3' id=\"footer-items\">\n              <div className=\"hotels-cars\">\n\n                <a className=\"contact-email\" href=\"mailto:customerservice@jlm_tourism.com\">Contact: Email - customerservice@jlm_tourism.com</a>\n                <a className=\"footer-cars\" href=\"https://bridge.carnect.com\" > Rent a Car</a>\n                <a className=\"footer-hotel\" href=\"https://www.hotelbeds.com/login\" > Search For Hotel</a>\n                <a className=\"location-address\" href=\"https://www.google.com/search?rlz=1C1CHBF_enUS953US953&tbs=lf:1,lf_ui:10&tbm=lcl&sxsrf=AOaemvIwl8l_2AztRiy9d-_gPBKE8gzDAQ:1631592355058&q=miami+shopping+centers&rflfq=1&num=10&ved=2ahUKEwiW1faVy_3yAhUdKVkFHV5bCw4QtgN6BAgbEAQ#rlfi=hd:;si:18115241926405961007;mv:[[25.719071831343403,-80.3415402250283],[25.715567869821335,-80.34958685207297],null,[25.717319863483514,-80.34556353855064],18]\" target=\"_blank\" rel=\"noopener noreferrer\">Address: 9375 SW 56th St, Miami, FL-33165</a>\n                <a className=\"weather-condition\" href=\"https://thirsty-williams-15b73e.netlify.app/\" target=\"_blank\" rel=\"noopener noreferrer\"> <img src=\"/images/weather-icon.png\" role=\"img\" aria-label=\"Weather icon\" class=\"icon\" style={{ width: 40, height: 40 }} />Local Weather</a>\n              </div>\n            </footer>\n          </StoreProvider>\n\n        </div>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (\n    process.env.NODE_ENV === 'production' &&\n    'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}